using System;
using System.Diagnostics;
using System.Numerics;

class Program
{
    struct Cell
    {
        public BigInteger Pattern;
        public uint Occurrences;

        public Cell(BigInteger pattern, uint occurrences)
        {
            Pattern = pattern;
            Occurrences = occurrences;
        }
    }

    static string test_seq

    static void Main(string[] args)
    {
        int n = 5000;

        // The sequence, start with [1]
        uint[] sequence = new uint[n];
        sequence[0] = 1;

        Cell[,] array = new Cell[n, n];

        Stopwatch sw = new Stopwatch();
        sw.Start();
        
        for (int i = 0; i < n - 1; i++)
        {
            uint max = 1;

            for (int j = 0; j <= i; j++)
            {
                // Pattern is saved as a base-10 number, could be done differently as well
                BigInteger pattern = (i - 1 >= 0 && j - 1 >= 0 ? array[i - 1, j - 1].Pattern * 5 : 0) + sequence[i];

                int length = j + 1;

                if (i - length < 0)
                {
                    // Index out of range: just add the pattern with an occurrence of 1
                    array[i, j] = new Cell(pattern, 1);
                    continue;
                }

                Cell prev = array[i - length, j];

                uint occurrences = 1 + (prev.Pattern == pattern ? prev.Occurrences : 0);

                array[i, j] = new Cell(pattern, occurrences);

                max = Math.Max(max, occurrences);
            }

            sequence[i + 1] = max;
        }

        sw.Stop();

        Console.WriteLine($"Time: {sw.ElapsedMilliseconds} ms");

        string output = "";

        foreach (int i in sequence)
        {
            output += i.ToString();
        }

        int maxCheck = output.Length;

        if (test_seq.Length < maxCheck)
        {
            Console.WriteLine("Test sequence too short. Can only check up to {0}", test_seq.Length);
            maxCheck = test_seq.Length;
        }

        for (int i = 0; i < output.Length; i++)
        {
            if (output[i] != test_seq[i])
            {
                Console.WriteLine("Incorrect at index {0}: found {1}, actual {2}", i, output[i], test_seq[i]);
                break;
            }
        }

        Console.WriteLine(output);
    }
}